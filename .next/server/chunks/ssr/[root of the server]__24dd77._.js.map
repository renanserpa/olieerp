{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/renan/Documents/olie-erp-final-package/src/lib/supabase/client.ts"],"sourcesContent":["\"use client\";\n\nimport { createBrowserClient } from '@supabase/ssr'\nimport { createClientComponentClient } from \"@supabase/auth-helpers-nextjs\";\nimport type { Database } from \"@/types/supabase\";\n\nexport function createClient() {\n  return createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n  )\n}\n\n// Exportando diretamente o createBrowserClient para compatibilidade\nexport { createBrowserClient };\n\n// Função alternativa para componentes que esperam createSupabaseClient\nexport function createSupabaseClient() {\n  return createClientComponentClient<Database>({\n    supabaseUrl: process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    supabaseKey: process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n  });\n}\n"],"names":[],"mappings":";;;;AAEA;AACA;AAHA;;;AAMO,SAAS;IACd,OAAO,CAAA,GAAA,0KAAA,CAAA,sBAAmB,AAAD;AAI3B;;AAMO,SAAS;IACd,OAAO,CAAA,GAAA,wKAAA,CAAA,8BAA2B,AAAD,EAAY;QAC3C,WAAW;QACX,WAAW;IACb;AACF"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/renan/Documents/olie-erp-final-package/src/contexts/auth-context.tsx"],"sourcesContent":["\"use client\";\n\nimport { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { createClient } from \"@/lib/supabase/client\";\nimport { toast } from \"sonner\";\n\n// Tipos para o sistema de permissões\nexport type Permission = {\n  id: string;\n  name: string;\n  code: string;\n  description?: string;\n  module_id: string;\n};\n\nexport type Role = {\n  id: string;\n  name: string;\n  description?: string;\n  is_system: boolean;\n  is_active: boolean;\n};\n\nexport type UserRole = {\n  id: string;\n  role_id: string;\n  role: Role;\n};\n\nexport type Module = {\n  id: string;\n  name: string;\n  path: string;\n  icon: string;\n  description?: string;\n  order_index: number;\n  is_active: boolean;\n};\n\n// Contexto de autenticação e autorização\ntype AuthContextType = {\n  user: any | null;\n  profile: any | null;\n  roles: Role[];\n  permissions: Permission[];\n  modules: Module[];\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  hasPermission: (permissionCode: string) => boolean;\n  hasRole: (roleName: string) => boolean;\n  canAccessModule: (modulePath: string) => boolean;\n  refreshPermissions: () => Promise<void>;\n  logout: () => Promise<void>;\n};\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport const AuthProvider = ({ children }: { children: ReactNode }) => {\n  const supabase = createClient();\n  const [user, setUser] = useState<any | null>(null);\n  const [profile, setProfile] = useState<any | null>(null);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [permissions, setPermissions] = useState<Permission[]>([]);\n  const [modules, setModules] = useState<Module[]>([]);\n  const [isLoading, setIsLoading] = useState(true);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // Carregar usuário e permissões\n  useEffect(() => {\n    const loadUserAndPermissions = async () => {\n      setIsLoading(true);\n      try {\n        // Verificar sessão atual\n        const { data: { session }, error: sessionError } = await supabase.auth.getSession();\n        \n        if (sessionError) {\n          console.error(\"Erro ao obter sessão:\", sessionError);\n          setIsAuthenticated(false);\n          setIsLoading(false);\n          return;\n        }\n        \n        if (!session) {\n          setUser(null);\n          setProfile(null);\n          setRoles([]);\n          setPermissions([]);\n          setIsAuthenticated(false);\n          setIsLoading(false);\n          return;\n        }\n        \n        setUser(session.user);\n        setIsAuthenticated(true);\n        \n        try {\n          // Carregar perfil do usuário\n          const { data: profileData, error: profileError } = await supabase\n            .from('user_profiles')\n            .select('*')\n            .eq('id', session.user.id)\n            .single();\n            \n          if (profileError) {\n            if (profileError.code !== 'PGRST116') { // PGRST116 = not found\n              console.error(\"Erro ao carregar perfil:\", profileError);\n              // Não interrompe o fluxo, apenas loga o erro\n            }\n          } else if (profileData) {\n            setProfile(profileData);\n          }\n        } catch (profileLoadError) {\n          console.error(\"Erro ao carregar perfil do usuário:\", profileLoadError);\n          // Continua o fluxo mesmo com erro no perfil\n        }\n        \n        try {\n          // Carregar roles do usuário\n          const { data: userRoles, error: rolesError } = await supabase\n            .from('user_roles')\n            .select(`\n              id,\n              role_id,\n              role:roles (\n                id,\n                name,\n                description,\n                is_system,\n                is_active\n              )\n            `)\n            .eq('user_id', session.user.id);\n            \n          if (rolesError) {\n            console.error(\"Erro ao carregar roles:\", rolesError);\n            // Continua com roles vazios\n            setRoles([]);\n          } else {\n            // Filtra roles nulos e inativos\n            const validRoles = userRoles\n              .filter(ur => ur.role && ur.role.is_active)\n              .map(ur => ur.role);\n            \n            setRoles(validRoles);\n            \n            // Se o usuário tem roles, carregar permissões associadas\n            if (validRoles.length > 0) {\n              const roleIds = validRoles.map(r => r.id);\n              \n              try {\n                const { data: permissionsData, error: permissionsError } = await supabase\n                  .from('role_permissions')\n                  .select(`\n                    permission:permissions (\n                      id,\n                      name,\n                      code,\n                      description,\n                      module_id\n                    )\n                  `)\n                  .in('role_id', roleIds);\n                  \n                if (permissionsError) {\n                  console.error(\"Erro ao carregar permissões:\", permissionsError);\n                  // Continua com permissões vazias\n                  setPermissions([]);\n                } else {\n                  // Extrair permissões únicas e filtrar nulos\n                  const validPermissions = permissionsData\n                    .filter(rp => rp.permission)\n                    .map(rp => rp.permission);\n                  \n                  const uniquePermissions = Array.from(\n                    new Map(validPermissions.map(p => [p.id, p])).values()\n                  );\n                  \n                  setPermissions(uniquePermissions);\n                  \n                  // Carregar módulos acessíveis\n                  const moduleIds = Array.from(\n                    new Set(uniquePermissions.map(p => p.module_id).filter(Boolean))\n                  );\n                  \n                  if (moduleIds.length > 0) {\n                    try {\n                      const { data: modulesData, error: modulesError } = await supabase\n                        .from('modules')\n                        .select('*')\n                        .in('id', moduleIds)\n                        .eq('is_active', true)\n                        .order('order_index');\n                        \n                      if (modulesError) {\n                        console.error(\"Erro ao carregar módulos:\", modulesError);\n                        // Continua com módulos vazios\n                        setModules([]);\n                      } else {\n                        setModules(modulesData || []);\n                      }\n                    } catch (modulesLoadError) {\n                      console.error(\"Erro ao carregar módulos:\", modulesLoadError);\n                      setModules([]);\n                    }\n                  }\n                }\n              } catch (permissionsLoadError) {\n                console.error(\"Erro ao carregar permissões:\", permissionsLoadError);\n                setPermissions([]);\n              }\n            }\n          }\n        } catch (rolesLoadError) {\n          console.error(\"Erro ao carregar roles do usuário:\", rolesLoadError);\n          setRoles([]);\n        }\n      } catch (error) {\n        console.error(\"Erro ao carregar dados de autenticação:\", error);\n        toast.error(\"Erro ao carregar dados de autenticação. Tente novamente.\");\n        setIsAuthenticated(false);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    \n    loadUserAndPermissions();\n    \n    // Configurar listener para mudanças de autenticação\n    const { data: authListener } = supabase.auth.onAuthStateChange(\n      async (event, session) => {\n        if (event === 'SIGNED_IN' || event === 'TOKEN_REFRESHED') {\n          setIsAuthenticated(true);\n          await loadUserAndPermissions();\n        } else if (event === 'SIGNED_OUT') {\n          setUser(null);\n          setProfile(null);\n          setRoles([]);\n          setPermissions([]);\n          setModules([]);\n          setIsAuthenticated(false);\n        }\n      }\n    );\n    \n    return () => {\n      authListener.subscription.unsubscribe();\n    };\n  }, []);\n  \n  // Verificar se o usuário tem uma permissão específica\n  const hasPermission = (permissionCode: string): boolean => {\n    if (!user || permissions.length === 0) return false;\n    return permissions.some(p => p.code === permissionCode);\n  };\n  \n  // Verificar se o usuário tem um role específico\n  const hasRole = (roleName: string): boolean => {\n    if (!user || roles.length === 0) return false;\n    return roles.some(r => r.name === roleName);\n  };\n  \n  // Verificar se o usuário pode acessar um módulo específico\n  const canAccessModule = (modulePath: string): boolean => {\n    if (!user || modules.length === 0) return false;\n    return modules.some(m => m.path === modulePath);\n  };\n  \n  // Recarregar permissões do usuário\n  const refreshPermissions = async (): Promise<void> => {\n    if (!user) return;\n    setIsLoading(true);\n    \n    try {\n      // Carregar roles do usuário\n      const { data: userRoles, error: rolesError } = await supabase\n        .from('user_roles')\n        .select(`\n          id,\n          role_id,\n          role:roles (\n            id,\n            name,\n            description,\n            is_system,\n            is_active\n          )\n        `)\n        .eq('user_id', user.id);\n        \n      if (rolesError) {\n        console.error(\"Erro ao recarregar roles:\", rolesError);\n        return;\n      }\n      \n      const validRoles = userRoles\n        .filter(ur => ur.role && ur.role.is_active)\n        .map(ur => ur.role);\n      \n      setRoles(validRoles);\n      \n      // Se o usuário tem roles, carregar permissões associadas\n      if (validRoles.length > 0) {\n        const roleIds = validRoles.map(r => r.id);\n        \n        const { data: permissionsData, error: permissionsError } = await supabase\n          .from('role_permissions')\n          .select(`\n            permission:permissions (\n              id,\n              name,\n              code,\n              description,\n              module_id\n            )\n          `)\n          .in('role_id', roleIds);\n          \n        if (permissionsError) {\n          console.error(\"Erro ao recarregar permissões:\", permissionsError);\n          return;\n        }\n        \n        // Extrair permissões únicas\n        const validPermissions = permissionsData\n          .filter(rp => rp.permission)\n          .map(rp => rp.permission);\n        \n        const uniquePermissions = Array.from(\n          new Map(validPermissions.map(p => [p.id, p])).values()\n        );\n        \n        setPermissions(uniquePermissions);\n        \n        // Carregar módulos acessíveis\n        const moduleIds = Array.from(\n          new Set(uniquePermissions.map(p => p.module_id).filter(Boolean))\n        );\n        \n        if (moduleIds.length > 0) {\n          const { data: modulesData, error: modulesError } = await supabase\n            .from('modules')\n            .select('*')\n            .in('id', moduleIds)\n            .eq('is_active', true)\n            .order('order_index');\n            \n          if (modulesError) {\n            console.error(\"Erro ao recarregar módulos:\", modulesError);\n          } else {\n            setModules(modulesData || []);\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Erro ao recarregar permissões:\", error);\n      toast.error(\"Erro ao atualizar permissões. Tente novamente.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  // Logout\n  const logout = async (): Promise<void> => {\n    try {\n      setIsLoading(true);\n      const { error } = await supabase.auth.signOut();\n      if (error) {\n        console.error(\"Erro ao fazer logout:\", error);\n        toast.error(\"Erro ao fazer logout. Tente novamente.\");\n      } else {\n        toast.success(\"Logout realizado com sucesso\");\n      }\n    } catch (error) {\n      console.error(\"Erro ao fazer logout:\", error);\n      toast.error(\"Erro ao fazer logout. Tente novamente.\");\n    } finally {\n      setIsLoading(false);\n      setIsAuthenticated(false);\n    }\n  };\n  \n  return (\n    <AuthContext.Provider\n      value={{\n        user,\n        profile,\n        roles,\n        permissions,\n        modules,\n        isLoading,\n        isAuthenticated,\n        hasPermission,\n        hasRole,\n        canAccessModule,\n        refreshPermissions,\n        logout\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\n// Hook para usar o contexto de autenticação\nexport const useAuth = (): AuthContextType => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n};\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 405, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 411, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/renan/Documents/olie-erp-final-package/src/contexts/notification-context-fallback.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { createContext, useContext, useState, ReactNode } from 'react';\n\n// Definição do tipo de notificação\nexport interface Notification {\n  id: string;\n  title: string;\n  message: string;\n  type: 'info' | 'success' | 'warning' | 'error';\n  duration?: number;\n}\n\n// Interface do contexto de notificações\ninterface NotificationContextType {\n  notifications: Notification[];\n  addNotification: (notification: Omit<Notification, 'id'>) => void;\n  removeNotification: (id: string) => void;\n}\n\n// Criação do contexto com valor padrão para evitar erros quando usado fora do provider\nconst defaultValue: NotificationContextType = {\n  notifications: [],\n  addNotification: (notification) => {\n    console.warn(\"useNotifications usado fora do NotificationProvider - usando fallback\");\n    // Implementação de fallback que não quebra a aplicação\n    const id = Math.random().toString(36).substring(2, 9);\n    const newNotification = { ...notification, id };\n    \n    // Exibir no console para debug\n    console.log(\"Notificação (fallback):\", newNotification);\n    \n    // Usar alert apenas em desenvolvimento para garantir visibilidade\n    if (process.env.NODE_ENV === 'development') {\n      alert(`${notification.title}: ${notification.message}`);\n    }\n  },\n  removeNotification: (id) => {\n    console.warn(\"useNotifications usado fora do NotificationProvider - usando fallback\");\n  }\n};\n\n// Criação do contexto com valor padrão\nconst NotificationContext = createContext<NotificationContextType>(defaultValue);\n\n// Hook personalizado para usar o contexto com fallback\nexport const useNotifications = () => {\n  // Tenta usar o contexto, mas se não estiver disponível, usa o valor padrão\n  const context = useContext(NotificationContext);\n  \n  if (context === defaultValue) {\n    console.warn(\"useNotifications está sendo usado fora de um NotificationProvider. Usando implementação de fallback.\");\n  }\n  \n  return context; // Sempre retorna um valor válido, mesmo fora do provider\n};\n\n// Props do provider\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\n// Componente Provider\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n\n  // Adicionar uma nova notificação\n  const addNotification = (notification: Omit<Notification, 'id'>) => {\n    const id = Math.random().toString(36).substring(2, 9);\n    const newNotification = { ...notification, id };\n    \n    setNotifications((prev) => [...prev, newNotification]);\n    \n    // Remover automaticamente após a duração especificada (ou 5 segundos por padrão)\n    if (notification.duration !== 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, notification.duration || 5000);\n    }\n  };\n\n  // Remover uma notificação pelo ID\n  const removeNotification = (id: string) => {\n    setNotifications((prev) => prev.filter((notification) => notification.id !== id));\n  };\n\n  return (\n    <NotificationContext.Provider value={{ notifications, addNotification, removeNotification }}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\nexport default NotificationProvider;\n"],"names":[],"mappings":";;;;;;AAEA;AAFA;;;AAoBA,uFAAuF;AACvF,MAAM,eAAwC;IAC5C,eAAe,EAAE;IACjB,iBAAiB,CAAC;QAChB,QAAQ,IAAI,CAAC;QACb,uDAAuD;QACvD,MAAM,KAAK,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;QACnD,MAAM,kBAAkB;YAAE,GAAG,YAAY;YAAE;QAAG;QAE9C,+BAA+B;QAC/B,QAAQ,GAAG,CAAC,2BAA2B;QAEvC,kEAAkE;QAClE,wCAA4C;YAC1C,MAAM,GAAG,aAAa,KAAK,CAAC,EAAE,EAAE,aAAa,OAAO,EAAE;QACxD;IACF;IACA,oBAAoB,CAAC;QACnB,QAAQ,IAAI,CAAC;IACf;AACF;AAEA,uCAAuC;AACvC,MAAM,oCAAsB,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAA2B;AAG5D,MAAM,mBAAmB;IAC9B,2EAA2E;IAC3E,MAAM,UAAU,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EAAE;IAE3B,IAAI,YAAY,cAAc;QAC5B,QAAQ,IAAI,CAAC;IACf;IAEA,OAAO,SAAS,yDAAyD;AAC3E;AAQO,MAAM,uBAA4D,CAAC,EAAE,QAAQ,EAAE;IACpF,MAAM,CAAC,eAAe,iBAAiB,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAkB,EAAE;IAErE,iCAAiC;IACjC,MAAM,kBAAkB,CAAC;QACvB,MAAM,KAAK,KAAK,MAAM,GAAG,QAAQ,CAAC,IAAI,SAAS,CAAC,GAAG;QACnD,MAAM,kBAAkB;YAAE,GAAG,YAAY;YAAE;QAAG;QAE9C,iBAAiB,CAAC,OAAS;mBAAI;gBAAM;aAAgB;QAErD,iFAAiF;QACjF,IAAI,aAAa,QAAQ,KAAK,GAAG;YAC/B,WAAW;gBACT,mBAAmB;YACrB,GAAG,aAAa,QAAQ,IAAI;QAC9B;IACF;IAEA,kCAAkC;IAClC,MAAM,qBAAqB,CAAC;QAC1B,iBAAiB,CAAC,OAAS,KAAK,MAAM,CAAC,CAAC,eAAiB,aAAa,EAAE,KAAK;IAC/E;IAEA,qBACE,8OAAC,oBAAoB,QAAQ;QAAC,OAAO;YAAE;YAAe;YAAiB;QAAmB;kBACvF;;;;;;AAGP;uCAEe"}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 497, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/renan/Documents/olie-erp-final-package/src/contexts/providers-wrapper.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { ReactNode } from 'react';\nimport { NotificationProvider } from './notification-context-fallback';\n\ninterface ProvidersWrapperProps {\n  children: ReactNode;\n}\n\n/**\n * Componente wrapper que agrupa todos os providers necessários para a aplicação\n * Isso garante que todos os componentes tenham acesso a todos os contextos necessários\n * independentemente de onde estejam na árvore de componentes\n */\nexport const ProvidersWrapper: React.FC<ProvidersWrapperProps> = ({ children }) => {\n  return (\n    <NotificationProvider>\n      {children}\n    </NotificationProvider>\n  );\n};\n\nexport default ProvidersWrapper;\n"],"names":[],"mappings":";;;;;AAGA;AAHA;;;AAcO,MAAM,mBAAoD,CAAC,EAAE,QAAQ,EAAE;IAC5E,qBACE,8OAAC,uJAAA,CAAA,uBAAoB;kBAClB;;;;;;AAGP;uCAEe"}},
    {"offset": {"line": 516, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 522, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/renan/Documents/olie-erp-final-package/src/lib/utils.ts"],"sourcesContent":["import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n \nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,2JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,OAAI,AAAD,EAAE;AACtB"}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 538, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/renan/Documents/olie-erp-final-package/src/components/ui/toaster.tsx"],"sourcesContent":["\"use client\"\n\nimport * as React from \"react\"\nimport { Toaster as Sonner } from \"sonner\"\n\nimport { cn } from \"@/lib/utils\"\n\ntype ToasterProps = React.ComponentProps<typeof Sonner>\n\nconst Toaster = ({ ...props }: ToasterProps) => {\n  return (\n    <Sonner\n      className={cn(\"toaster group\")}\n      toastOptions={{\n        classNames: {\n          toast:\n            \"group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg\",\n          description: \"group-[.toast]:text-muted-foreground\",\n          actionButton:\n            \"group-[.toast]:bg-primary group-[.toast]:text-primary-foreground\",\n          cancelButton:\n            \"group-[.toast]:bg-muted group-[.toast]:text-muted-foreground\",\n        },\n      }}\n      {...props}\n    />\n  )\n}\n\nexport { Toaster }\n"],"names":[],"mappings":";;;;AAGA;AAEA;AALA;;;;AASA,MAAM,UAAU,CAAC,EAAE,GAAG,OAAqB;IACzC,qBACE,8OAAC,wIAAA,CAAA,UAAM;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE;QACd,cAAc;YACZ,YAAY;gBACV,OACE;gBACF,aAAa;gBACb,cACE;gBACF,cACE;YACJ;QACF;QACC,GAAG,KAAK;;;;;;AAGf"}},
    {"offset": {"line": 567, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}