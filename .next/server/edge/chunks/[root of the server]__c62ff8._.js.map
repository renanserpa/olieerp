{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/supabase/middleware.ts"],"sourcesContent":["import { createServerClient } from \"@supabase/ssr\";\nimport { NextResponse, type NextRequest } from \"next/server\";\nimport type { Database } from \"@/types/supabase\";\n\nexport async function createSupabaseMiddlewareClient(req: NextRequest) {\n  // Cria uma resposta inicial\n  const response = NextResponse.next();\n  \n  // Definindo as credenciais diretamente no código para o contexto Edge\n  // Isso é necessário porque variáveis de ambiente NEXT_PUBLIC_ podem não estar \n  // disponíveis no contexto Edge Runtime do Next.js\n  const supabaseUrl = \"https://lhnfftajaanimavszbnf.supabase.co\";\n  const supabaseKey = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxobmZmdGFqYWFuaW1hdnN6Ym5mIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDczMTEyODMsImV4cCI6MjA2Mjg4NzI4M30.lJRjKPPzLNwRByFfa_XmtM20IPKqcn-4dddgNbuOUzU\";\n\n  // Cria o cliente Supabase usando createServerClient em vez de createMiddlewareClient\n  const supabase = createServerClient<Database>(\n    supabaseUrl,\n    supabaseKey,\n    {\n      cookies: {\n        get: (name) => req.cookies.get(name)?.value,\n        set: (name, value, options) => {\n          response.cookies.set({\n            name,\n            value,\n            ...options,\n          });\n        },\n        remove: (name, options) => {\n          response.cookies.set({\n            name,\n            value: '',\n            ...options,\n          });\n        },\n      },\n    }\n  );\n\n  return { supabase, response };\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AAAA;AADA;;;AAIO,eAAe,+BAA+B,GAAgB;IACnE,4BAA4B;IAC5B,MAAM,WAAW,qLAAA,CAAA,eAAY,CAAC,IAAI;IAElC,sEAAsE;IACtE,+EAA+E;IAC/E,kDAAkD;IAClD,MAAM,cAAc;IACpB,MAAM,cAAc;IAEpB,qFAAqF;IACrF,MAAM,WAAW,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,EAChC,aACA,aACA;QACE,SAAS;YACP,KAAK,CAAC,OAAS,IAAI,OAAO,CAAC,GAAG,CAAC,OAAO;YACtC,KAAK,CAAC,MAAM,OAAO;gBACjB,SAAS,OAAO,CAAC,GAAG,CAAC;oBACnB;oBACA;oBACA,GAAG,OAAO;gBACZ;YACF;YACA,QAAQ,CAAC,MAAM;gBACb,SAAS,OAAO,CAAC,GAAG,CAAC;oBACnB;oBACA,OAAO;oBACP,GAAG,OAAO;gBACZ;YACF;QACF;IACF;IAGF,OAAO;QAAE;QAAU;IAAS;AAC9B"}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { type NextRequest, NextResponse } from \"next/server\";\nimport { createSupabaseMiddlewareClient } from \"@/lib/supabase/middleware\";\n\nexport async function middleware(request: NextRequest) {\n  try {\n    const { supabase, response } = await createSupabaseMiddlewareClient(request);\n\n    // Refresh session if expired - required for Server Components\n    const { data: { session } } = await supabase.auth.getSession();\n\n    // Define public routes (accessible without login)\n    const publicRoutes = [\"/login\", \"/register\", \"/password-reset\"]; \n\n    // Check if the current path is a public route\n    const isPublicRoute = publicRoutes.some(route => request.nextUrl.pathname.startsWith(route));\n\n    // If user is not logged in and trying to access a protected route, redirect to login\n    if (!session && !isPublicRoute) {\n      return NextResponse.redirect(new URL(\"/login\", request.url));\n    }\n\n    // If user is logged in and trying to access the login page, redirect to dashboard\n    if (session && request.nextUrl.pathname.startsWith(\"/login\")) {\n      return NextResponse.redirect(new URL(\"/\", request.url)); // Redirect to dashboard root\n    }\n\n    return response;\n  } catch (error) {\n    console.error(\"Middleware error:\", error);\n    // Em caso de erro na autenticação, permitir o acesso e deixar a página lidar com isso\n    return NextResponse.next();\n  }\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - api routes\n     * Feel free to modify this pattern to include more paths.\n     */\n    \"/((?!_next/static|_next/image|favicon.ico|api/|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AACA;AADA;;;AAGO,eAAe,WAAW,OAAoB;IACnD,IAAI;QACF,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,MAAM,CAAA,GAAA,oIAAA,CAAA,iCAA8B,AAAD,EAAE;QAEpE,8DAA8D;QAC9D,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;QAE5D,kDAAkD;QAClD,MAAM,eAAe;YAAC;YAAU;YAAa;SAAkB;QAE/D,8CAA8C;QAC9C,MAAM,gBAAgB,aAAa,IAAI,CAAC,CAAA,QAAS,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC;QAErF,qFAAqF;QACrF,IAAI,CAAC,WAAW,CAAC,eAAe;YAC9B,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,UAAU,QAAQ,GAAG;QAC5D;QAEA,kFAAkF;QAClF,IAAI,WAAW,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,WAAW;YAC5D,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG,IAAI,6BAA6B;QACxF;QAEA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,qBAAqB;QACnC,sFAAsF;QACtF,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QACP;;;;;;;KAOC,GACD;KACD;AACH"}},
    {"offset": {"line": 120, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}